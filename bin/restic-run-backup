#!/bin/sh

set -e


# == Configuration ==

if [ $# -ne 1 ] ; then echo "Must supply profile, e.g. 'default'" ; exit 1 ; fi
PROFILE_NAME="$1"
shift
RESTIC_CONFIG_DIR="${HOME}/.config/restic-run/${PROFILE_NAME}"
if [ ! -d "${RESTIC_CONFIG_DIR}" ] ; then echo "No such profile \"${PROFILE_NAME}\"." ; exit 1 ; fi
. "${RESTIC_CONFIG_DIR}/params"

QUIET="-q"
# restic 0.9.4 has a nasty bug where it outputs stuff anyway:
# https://github.com/restic/restic/issues/2140
# Also, a variable containing "> /dev/null" would not be interpreted
# in the desired manner.
BACKUP_NEEDS_PIPE="y"

if [ -n "${VERBOSE}" ]
then
    QUIET=""
    BACKUP_NEEDS_PIPE="n"
fi

# If in doubt, this may help you fix space- and IFS-related issues:
# echo $'#!/usr/bin/env python3\nimport sys\nprint(sys.argv)' > ~/bin/showargs
#CMD_PREFIX='showargs'
CMD_PREFIX=
if command -v nice >/dev/null 2>&1
then
    CMD_PREFIX="nice ${CMD_PREFIX}"
fi
if command -v ionice >/dev/null 2>&1
then
    CMD_PREFIX="ionice ${CMD_PREFIX}"
fi

TAG_ARGS=""
if [ -n "${RESTIC_USE_TAG}" ]
then
    TAG_ARGS="--tag ${RESTIC_USE_TAG}"
fi


# == Check connectivity ==

if echo "ls writable/.this_is_backup-${RESTIC_REPOSITORY_USER}_writable" \
    | timeout 10s sftp -b- ${RESTIC_ACCOUNT} > /dev/null 2> /dev/null
then
    # Everything is good.
    if [ -n "${VERBOSE}" ]
    then
        echo "Repository seems healthy."
    fi
else
    # Hmm.  The machine appears to be offline, or have any other problem,
    # maybe the backup mount isn't there?
    # If this happens too often, the watchdogs (on each machine) will notice
    # that '.last_backup_success' hasn't been updated in a while,
    # and send a warning mail.
    if [ -n "${VERBOSE}" ]
    then
        echo "sftp failed."
    fi
    exit 0
fi


# == Collect some nice extra data ==

export RESTIC_REPOSITORY
export RESTIC_PASSWORD
${CMD_PREFIX} restic snapshots ${QUIET} --group-by host,paths,tags --latest 1 --json \
    > "${RESTIC_CONFIG_DIR}/previous-snapshot.json"

if [ "${USER}" = "root" ] && command -v smartctl >/dev/null 2>&1
then
    for sdx in $(find /dev -maxdepth 1 -name 'sd?' -printf '%f\n')
    do
        smartctl -a /dev/${sdx} > "${RESTIC_CONFIG_DIR}/smartctl-${sdx}"
    done
fi


# == Do the backup ==

if [ "${BACKUP_NEEDS_PIPE}" = "y" ]
then
    ${CMD_PREFIX} restic ${QUIET} --exclude-file "${RESTIC_CONFIG_DIR}/exclude.lst" backup ${TAG_ARGS} --files-from "${RESTIC_CONFIG_DIR}/files-and-dirs.lst" "${RESTIC_CONFIG_DIR}" > /dev/null
else
    ${CMD_PREFIX} restic ${QUIET} --exclude-file "${RESTIC_CONFIG_DIR}/exclude.lst" backup ${TAG_ARGS} --files-from "${RESTIC_CONFIG_DIR}/files-and-dirs.lst" "${RESTIC_CONFIG_DIR}"
fi


# == Verify consistency of the repository ==

if [ -n "${RESTIC_READ_SUBSET_PERCENTAGE}" ]
then
    # --read-data-subset takes care of the blobs. But what about the trees?
    # Conflict:
    # - On the one hand, we very much want to check all trees.
    # - On the other hand, this reads a surprisingly large amount of data, taking 7 minutes(!) for my home directory.
    # The solution is "--with-cache", which surprisingly does NOT use the cache for the --read-subset part.
    # See https://forum.restic.net/t/how-to-speed-up-tiny-incremental-checks/5905/3
    ${CMD_PREFIX} restic check ${QUIET} --with-cache --read-data-subset="${RESTIC_READ_SUBSET_PERCENTAGE}"
fi


# == Un-press the dead man's switch ==

touch "${RESTIC_CONFIG_DIR}/last-success.stamp"
